/*
 * generated by Xtext 2.32.0
 */
package fr.n7.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import fr.n7.ide.contentassist.antlr.internal.InternalGs1Parser;
import fr.n7.services.Gs1GrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class Gs1Parser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(Gs1GrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, Gs1GrammarAccess grammarAccess) {
			builder.put(grammarAccess.getColonneAccess().getAlternatives(), "rule__Colonne__Alternatives");
			builder.put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
			builder.put(grammarAccess.getOperationsAccess().getAlternatives(), "rule__Operations__Alternatives");
			builder.put(grammarAccess.getApplicationAccess().getGroup(), "rule__Application__Group__0");
			builder.put(grammarAccess.getTableAccess().getGroup(), "rule__Table__Group__0");
			builder.put(grammarAccess.getColonne_deriveeAccess().getGroup(), "rule__Colonne_derivee__Group__0");
			builder.put(grammarAccess.getColonne_referenceeAccess().getGroup(), "rule__Colonne_referencee__Group__0");
			builder.put(grammarAccess.getColonnesimpleAccess().getGroup(), "rule__Colonnesimple__Group__0");
			builder.put(grammarAccess.getExpressionBinaireAccess().getGroup(), "rule__ExpressionBinaire__Group__0");
			builder.put(grammarAccess.getAccesVariableAccess().getGroup(), "rule__AccesVariable__Group__0");
			builder.put(grammarAccess.getOperateurAccess().getGroup(), "rule__Operateur__Group__0");
			builder.put(grammarAccess.getModelAccess().getApplicationsAssignment(), "rule__Model__ApplicationsAssignment");
			builder.put(grammarAccess.getApplicationAccess().getTablesAssignment_2(), "rule__Application__TablesAssignment_2");
			builder.put(grammarAccess.getTableAccess().getNameAssignment_1(), "rule__Table__NameAssignment_1");
			builder.put(grammarAccess.getTableAccess().getIdAssignment_5(), "rule__Table__IdAssignment_5");
			builder.put(grammarAccess.getTableAccess().getNomAssignment_8(), "rule__Table__NomAssignment_8");
			builder.put(grammarAccess.getTableAccess().getColonnesAssignment_9(), "rule__Table__ColonnesAssignment_9");
			builder.put(grammarAccess.getColonne_deriveeAccess().getNameAssignment_1(), "rule__Colonne_derivee__NameAssignment_1");
			builder.put(grammarAccess.getColonne_deriveeAccess().getIdAssignment_5(), "rule__Colonne_derivee__IdAssignment_5");
			builder.put(grammarAccess.getColonne_deriveeAccess().getNomAssignment_8(), "rule__Colonne_derivee__NomAssignment_8");
			builder.put(grammarAccess.getColonne_deriveeAccess().getExpressionAssignment_11(), "rule__Colonne_derivee__ExpressionAssignment_11");
			builder.put(grammarAccess.getColonne_referenceeAccess().getNameAssignment_1(), "rule__Colonne_referencee__NameAssignment_1");
			builder.put(grammarAccess.getColonne_referenceeAccess().getIdAssignment_5(), "rule__Colonne_referencee__IdAssignment_5");
			builder.put(grammarAccess.getColonne_referenceeAccess().getNomAssignment_8(), "rule__Colonne_referencee__NomAssignment_8");
			builder.put(grammarAccess.getColonne_referenceeAccess().getTableAssignment_11(), "rule__Colonne_referencee__TableAssignment_11");
			builder.put(grammarAccess.getColonne_referenceeAccess().getColonneAssignment_14(), "rule__Colonne_referencee__ColonneAssignment_14");
			builder.put(grammarAccess.getColonnesimpleAccess().getNameAssignment_1(), "rule__Colonnesimple__NameAssignment_1");
			builder.put(grammarAccess.getColonnesimpleAccess().getIdAssignment_5(), "rule__Colonnesimple__IdAssignment_5");
			builder.put(grammarAccess.getColonnesimpleAccess().getNomAssignment_8(), "rule__Colonnesimple__NomAssignment_8");
			builder.put(grammarAccess.getExpressionBinaireAccess().getNameAssignment_1(), "rule__ExpressionBinaire__NameAssignment_1");
			builder.put(grammarAccess.getExpressionBinaireAccess().getOperandeGAssignment_5(), "rule__ExpressionBinaire__OperandeGAssignment_5");
			builder.put(grammarAccess.getExpressionBinaireAccess().getOperateurAssignment_8(), "rule__ExpressionBinaire__OperateurAssignment_8");
			builder.put(grammarAccess.getExpressionBinaireAccess().getOperandeDAssignment_11(), "rule__ExpressionBinaire__OperandeDAssignment_11");
			builder.put(grammarAccess.getAccesVariableAccess().getNameAssignment_1(), "rule__AccesVariable__NameAssignment_1");
			builder.put(grammarAccess.getAccesVariableAccess().getColonneAssignment_5(), "rule__AccesVariable__ColonneAssignment_5");
			builder.put(grammarAccess.getOperateurAccess().getTypeAssignment_4(), "rule__Operateur__TypeAssignment_4");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private Gs1GrammarAccess grammarAccess;

	@Override
	protected InternalGs1Parser createParser() {
		InternalGs1Parser result = new InternalGs1Parser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public Gs1GrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(Gs1GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
