/**
 * generated by Xtext 2.32.0
 */
package fr.n7.gs1.impl;

import fr.n7.gs1.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class Gs1FactoryImpl extends EFactoryImpl implements Gs1Factory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static Gs1Factory init()
  {
    try
    {
      Gs1Factory theGs1Factory = (Gs1Factory)EPackage.Registry.INSTANCE.getEFactory(Gs1Package.eNS_URI);
      if (theGs1Factory != null)
      {
        return theGs1Factory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new Gs1FactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Gs1FactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case Gs1Package.MODEL: return createModel();
      case Gs1Package.APPLICATION: return createApplication();
      case Gs1Package.TABLE: return createTable();
      case Gs1Package.COLONNE: return createColonne();
      case Gs1Package.COLONNE_DERIVEE: return createColonne_derivee();
      case Gs1Package.COLONNE_REFERENCEE: return createColonne_referencee();
      case Gs1Package.COLONNESIMPLE: return createColonnesimple();
      case Gs1Package.EXPRESSION: return createExpression();
      case Gs1Package.EXPRESSION_BINAIRE: return createExpressionBinaire();
      case Gs1Package.ACCES_VARIABLE: return createAccesVariable();
      case Gs1Package.OPERATEUR: return createOperateur();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case Gs1Package.OPERATIONS:
        return createOperationsFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case Gs1Package.OPERATIONS:
        return convertOperationsToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Application createApplication()
  {
    ApplicationImpl application = new ApplicationImpl();
    return application;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Table createTable()
  {
    TableImpl table = new TableImpl();
    return table;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Colonne createColonne()
  {
    ColonneImpl colonne = new ColonneImpl();
    return colonne;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Colonne_derivee createColonne_derivee()
  {
    Colonne_deriveeImpl colonne_derivee = new Colonne_deriveeImpl();
    return colonne_derivee;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Colonne_referencee createColonne_referencee()
  {
    Colonne_referenceeImpl colonne_referencee = new Colonne_referenceeImpl();
    return colonne_referencee;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Colonnesimple createColonnesimple()
  {
    ColonnesimpleImpl colonnesimple = new ColonnesimpleImpl();
    return colonnesimple;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionBinaire createExpressionBinaire()
  {
    ExpressionBinaireImpl expressionBinaire = new ExpressionBinaireImpl();
    return expressionBinaire;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AccesVariable createAccesVariable()
  {
    AccesVariableImpl accesVariable = new AccesVariableImpl();
    return accesVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Operateur createOperateur()
  {
    OperateurImpl operateur = new OperateurImpl();
    return operateur;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Operations createOperationsFromString(EDataType eDataType, String initialValue)
  {
    Operations result = Operations.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertOperationsToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Gs1Package getGs1Package()
  {
    return (Gs1Package)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static Gs1Package getPackage()
  {
    return Gs1Package.eINSTANCE;
  }

} //Gs1FactoryImpl
