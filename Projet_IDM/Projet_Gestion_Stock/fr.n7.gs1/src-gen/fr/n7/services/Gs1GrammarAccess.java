/*
 * generated by Xtext 2.32.0
 */
package fr.n7.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class Gs1GrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Gs1.Model");
		private final Assignment cApplicationsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cApplicationsApplicationParserRuleCall_0 = (RuleCall)cApplicationsAssignment.eContents().get(0);
		
		//Model:
		//applications+=Application*;
		@Override public ParserRule getRule() { return rule; }
		
		//applications+=Application*
		public Assignment getApplicationsAssignment() { return cApplicationsAssignment; }
		
		//Application
		public RuleCall getApplicationsApplicationParserRuleCall_0() { return cApplicationsApplicationParserRuleCall_0; }
	}
	public class ApplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Gs1.Application");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApplicationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTablesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTablesTableParserRuleCall_2_0 = (RuleCall)cTablesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Application:
		//'Application' '{'
		//(tables+=Table)*
		//'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Application' '{'
		//(tables+=Table)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Application'
		public Keyword getApplicationKeyword_0() { return cApplicationKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(tables+=Table)*
		public Assignment getTablesAssignment_2() { return cTablesAssignment_2; }
		
		//Table
		public RuleCall getTablesTableParserRuleCall_2_0() { return cTablesTableParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Gs1.Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cIdKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIdAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIdINTTerminalRuleCall_5_0 = (RuleCall)cIdAssignment_5.eContents().get(0);
		private final Keyword cNomKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cNomAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cNomSTRINGTerminalRuleCall_8_0 = (RuleCall)cNomAssignment_8.eContents().get(0);
		private final Assignment cColonnesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cColonnesColonneParserRuleCall_9_0 = (RuleCall)cColonnesAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Table:
		//'Table' name=ID '{'
		//'id' '=' id=INT
		//'Nom' '=' Nom=STRING
		//(colonnes+=Colonne)*
		//'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Table' name=ID '{'
		//'id' '=' id=INT
		//'Nom' '=' Nom=STRING
		//(colonnes+=Colonne)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Table'
		public Keyword getTableKeyword_0() { return cTableKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'id'
		public Keyword getIdKeyword_3() { return cIdKeyword_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//id=INT
		public Assignment getIdAssignment_5() { return cIdAssignment_5; }
		
		//INT
		public RuleCall getIdINTTerminalRuleCall_5_0() { return cIdINTTerminalRuleCall_5_0; }
		
		//'Nom'
		public Keyword getNomKeyword_6() { return cNomKeyword_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
		
		//Nom=STRING
		public Assignment getNomAssignment_8() { return cNomAssignment_8; }
		
		//STRING
		public RuleCall getNomSTRINGTerminalRuleCall_8_0() { return cNomSTRINGTerminalRuleCall_8_0; }
		
		//(colonnes+=Colonne)*
		public Assignment getColonnesAssignment_9() { return cColonnesAssignment_9; }
		
		//Colonne
		public RuleCall getColonnesColonneParserRuleCall_9_0() { return cColonnesColonneParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class ColonneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Gs1.Colonne");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cColonne_deriveeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cColonne_referenceeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cColonnesimpleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Colonne:
		//Colonne_derivee | Colonne_referencee | Colonnesimple;
		@Override public ParserRule getRule() { return rule; }
		
		//Colonne_derivee | Colonne_referencee | Colonnesimple
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Colonne_derivee
		public RuleCall getColonne_deriveeParserRuleCall_0() { return cColonne_deriveeParserRuleCall_0; }
		
		//Colonne_referencee
		public RuleCall getColonne_referenceeParserRuleCall_1() { return cColonne_referenceeParserRuleCall_1; }
		
		//Colonnesimple
		public RuleCall getColonnesimpleParserRuleCall_2() { return cColonnesimpleParserRuleCall_2; }
	}
	public class Colonne_deriveeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Gs1.Colonne_derivee");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonne_deriveeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cIdKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIdAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIdINTTerminalRuleCall_5_0 = (RuleCall)cIdAssignment_5.eContents().get(0);
		private final Keyword cNomKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cNomAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cNomSTRINGTerminalRuleCall_8_0 = (RuleCall)cNomAssignment_8.eContents().get(0);
		private final Keyword cExpressionKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cEqualsSignKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cExpressionAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cExpressionExpressionParserRuleCall_11_0 = (RuleCall)cExpressionAssignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//Colonne_derivee:
		//'Colonne_derivee' name=ID '{'
		//'id' '=' id=INT
		//'Nom' '=' Nom=STRING
		//'expression' '=' expression=Expression
		//'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Colonne_derivee' name=ID '{'
		//'id' '=' id=INT
		//'Nom' '=' Nom=STRING
		//'expression' '=' expression=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Colonne_derivee'
		public Keyword getColonne_deriveeKeyword_0() { return cColonne_deriveeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'id'
		public Keyword getIdKeyword_3() { return cIdKeyword_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//id=INT
		public Assignment getIdAssignment_5() { return cIdAssignment_5; }
		
		//INT
		public RuleCall getIdINTTerminalRuleCall_5_0() { return cIdINTTerminalRuleCall_5_0; }
		
		//'Nom'
		public Keyword getNomKeyword_6() { return cNomKeyword_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
		
		//Nom=STRING
		public Assignment getNomAssignment_8() { return cNomAssignment_8; }
		
		//STRING
		public RuleCall getNomSTRINGTerminalRuleCall_8_0() { return cNomSTRINGTerminalRuleCall_8_0; }
		
		//'expression'
		public Keyword getExpressionKeyword_9() { return cExpressionKeyword_9; }
		
		//'='
		public Keyword getEqualsSignKeyword_10() { return cEqualsSignKeyword_10; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_11() { return cExpressionAssignment_11; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_11_0() { return cExpressionExpressionParserRuleCall_11_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}
	public class Colonne_referenceeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Gs1.Colonne_referencee");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonne_referenceeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cIdKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIdAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIdINTTerminalRuleCall_5_0 = (RuleCall)cIdAssignment_5.eContents().get(0);
		private final Keyword cNomKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cNomAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cNomSTRINGTerminalRuleCall_8_0 = (RuleCall)cNomAssignment_8.eContents().get(0);
		private final Keyword cTableKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cEqualsSignKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cTableAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final CrossReference cTableTableCrossReference_11_0 = (CrossReference)cTableAssignment_11.eContents().get(0);
		private final RuleCall cTableTableIDTerminalRuleCall_11_0_1 = (RuleCall)cTableTableCrossReference_11_0.eContents().get(1);
		private final Keyword cColonneKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cEqualsSignKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cColonneAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final CrossReference cColonneColonneCrossReference_14_0 = (CrossReference)cColonneAssignment_14.eContents().get(0);
		private final RuleCall cColonneColonneIDTerminalRuleCall_14_0_1 = (RuleCall)cColonneColonneCrossReference_14_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_15 = (Keyword)cGroup.eContents().get(15);
		
		//Colonne_referencee:
		//'Colonne_referencee' name=ID '{'
		//'id' '=' id=INT
		//'Nom' '=' Nom=STRING
		//'table' '=' table=[Table]
		//'colonne' '=' colonne=[Colonne]
		//'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Colonne_referencee' name=ID '{'
		//'id' '=' id=INT
		//'Nom' '=' Nom=STRING
		//'table' '=' table=[Table]
		//'colonne' '=' colonne=[Colonne]
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Colonne_referencee'
		public Keyword getColonne_referenceeKeyword_0() { return cColonne_referenceeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'id'
		public Keyword getIdKeyword_3() { return cIdKeyword_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//id=INT
		public Assignment getIdAssignment_5() { return cIdAssignment_5; }
		
		//INT
		public RuleCall getIdINTTerminalRuleCall_5_0() { return cIdINTTerminalRuleCall_5_0; }
		
		//'Nom'
		public Keyword getNomKeyword_6() { return cNomKeyword_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
		
		//Nom=STRING
		public Assignment getNomAssignment_8() { return cNomAssignment_8; }
		
		//STRING
		public RuleCall getNomSTRINGTerminalRuleCall_8_0() { return cNomSTRINGTerminalRuleCall_8_0; }
		
		//'table'
		public Keyword getTableKeyword_9() { return cTableKeyword_9; }
		
		//'='
		public Keyword getEqualsSignKeyword_10() { return cEqualsSignKeyword_10; }
		
		//table=[Table]
		public Assignment getTableAssignment_11() { return cTableAssignment_11; }
		
		//[Table]
		public CrossReference getTableTableCrossReference_11_0() { return cTableTableCrossReference_11_0; }
		
		//ID
		public RuleCall getTableTableIDTerminalRuleCall_11_0_1() { return cTableTableIDTerminalRuleCall_11_0_1; }
		
		//'colonne'
		public Keyword getColonneKeyword_12() { return cColonneKeyword_12; }
		
		//'='
		public Keyword getEqualsSignKeyword_13() { return cEqualsSignKeyword_13; }
		
		//colonne=[Colonne]
		public Assignment getColonneAssignment_14() { return cColonneAssignment_14; }
		
		//[Colonne]
		public CrossReference getColonneColonneCrossReference_14_0() { return cColonneColonneCrossReference_14_0; }
		
		//ID
		public RuleCall getColonneColonneIDTerminalRuleCall_14_0_1() { return cColonneColonneIDTerminalRuleCall_14_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_15() { return cRightCurlyBracketKeyword_15; }
	}
	public class ColonnesimpleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Gs1.Colonnesimple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonnesimpleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cIdKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIdAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIdINTTerminalRuleCall_5_0 = (RuleCall)cIdAssignment_5.eContents().get(0);
		private final Keyword cNomKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cNomAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cNomSTRINGTerminalRuleCall_8_0 = (RuleCall)cNomAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Colonnesimple:
		//'Colonnesimple' name=ID '{'
		//'id' '=' id=INT
		//'Nom' '=' Nom=STRING
		//'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Colonnesimple' name=ID '{'
		//'id' '=' id=INT
		//'Nom' '=' Nom=STRING
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Colonnesimple'
		public Keyword getColonnesimpleKeyword_0() { return cColonnesimpleKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'id'
		public Keyword getIdKeyword_3() { return cIdKeyword_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//id=INT
		public Assignment getIdAssignment_5() { return cIdAssignment_5; }
		
		//INT
		public RuleCall getIdINTTerminalRuleCall_5_0() { return cIdINTTerminalRuleCall_5_0; }
		
		//'Nom'
		public Keyword getNomKeyword_6() { return cNomKeyword_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
		
		//Nom=STRING
		public Assignment getNomAssignment_8() { return cNomAssignment_8; }
		
		//STRING
		public RuleCall getNomSTRINGTerminalRuleCall_8_0() { return cNomSTRINGTerminalRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Gs1.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionBinaireParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAccesVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Expression:
		//ExpressionBinaire | AccesVariable;
		@Override public ParserRule getRule() { return rule; }
		
		//ExpressionBinaire | AccesVariable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExpressionBinaire
		public RuleCall getExpressionBinaireParserRuleCall_0() { return cExpressionBinaireParserRuleCall_0; }
		
		//AccesVariable
		public RuleCall getAccesVariableParserRuleCall_1() { return cAccesVariableParserRuleCall_1; }
	}
	public class ExpressionBinaireElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Gs1.ExpressionBinaire");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExpressionBinaireKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cOperandeGKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOperandeGAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOperandeGExpressionParserRuleCall_5_0 = (RuleCall)cOperandeGAssignment_5.eContents().get(0);
		private final Keyword cOperateurKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cOperateurAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOperateurOperateurParserRuleCall_8_0 = (RuleCall)cOperateurAssignment_8.eContents().get(0);
		private final Keyword cOperandeDKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cEqualsSignKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cOperandeDAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cOperandeDExpressionParserRuleCall_11_0 = (RuleCall)cOperandeDAssignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//ExpressionBinaire:
		//'ExpressionBinaire' name=ID '{'
		//'operandeG' '=' operandeG=Expression
		//'operateur' '=' operateur=Operateur
		//'operandeD' '=' operandeD=Expression
		//'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ExpressionBinaire' name=ID '{'
		//'operandeG' '=' operandeG=Expression
		//'operateur' '=' operateur=Operateur
		//'operandeD' '=' operandeD=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'ExpressionBinaire'
		public Keyword getExpressionBinaireKeyword_0() { return cExpressionBinaireKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'operandeG'
		public Keyword getOperandeGKeyword_3() { return cOperandeGKeyword_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//operandeG=Expression
		public Assignment getOperandeGAssignment_5() { return cOperandeGAssignment_5; }
		
		//Expression
		public RuleCall getOperandeGExpressionParserRuleCall_5_0() { return cOperandeGExpressionParserRuleCall_5_0; }
		
		//'operateur'
		public Keyword getOperateurKeyword_6() { return cOperateurKeyword_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
		
		//operateur=Operateur
		public Assignment getOperateurAssignment_8() { return cOperateurAssignment_8; }
		
		//Operateur
		public RuleCall getOperateurOperateurParserRuleCall_8_0() { return cOperateurOperateurParserRuleCall_8_0; }
		
		//'operandeD'
		public Keyword getOperandeDKeyword_9() { return cOperandeDKeyword_9; }
		
		//'='
		public Keyword getEqualsSignKeyword_10() { return cEqualsSignKeyword_10; }
		
		//operandeD=Expression
		public Assignment getOperandeDAssignment_11() { return cOperandeDAssignment_11; }
		
		//Expression
		public RuleCall getOperandeDExpressionParserRuleCall_11_0() { return cOperandeDExpressionParserRuleCall_11_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}
	public class AccesVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Gs1.AccesVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAccesVariableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonneKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cColonneAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cColonneColonneCrossReference_5_0 = (CrossReference)cColonneAssignment_5.eContents().get(0);
		private final RuleCall cColonneColonneIDTerminalRuleCall_5_0_1 = (RuleCall)cColonneColonneCrossReference_5_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//AccesVariable:
		//'AccesVariable' name=ID '{'
		//'colonne' '=' colonne=[Colonne]
		//'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'AccesVariable' name=ID '{'
		//'colonne' '=' colonne=[Colonne]
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'AccesVariable'
		public Keyword getAccesVariableKeyword_0() { return cAccesVariableKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'colonne'
		public Keyword getColonneKeyword_3() { return cColonneKeyword_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//colonne=[Colonne]
		public Assignment getColonneAssignment_5() { return cColonneAssignment_5; }
		
		//[Colonne]
		public CrossReference getColonneColonneCrossReference_5_0() { return cColonneColonneCrossReference_5_0; }
		
		//ID
		public RuleCall getColonneColonneIDTerminalRuleCall_5_0_1() { return cColonneColonneIDTerminalRuleCall_5_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class OperateurElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Gs1.Operateur");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperateurKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeOperationsEnumRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Operateur:
		//'Operateur' '{'
		//'type' '=' type=Operations
		//'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Operateur' '{'
		//'type' '=' type=Operations
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Operateur'
		public Keyword getOperateurKeyword_0() { return cOperateurKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'type'
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//type=Operations
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//Operations
		public RuleCall getTypeOperationsEnumRuleCall_4_0() { return cTypeOperationsEnumRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	
	public class OperationsElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Gs1.Operations");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAdditionEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAdditionAdditionKeyword_0_0 = (Keyword)cAdditionEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSoustractionEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSoustractionSoustractionKeyword_1_0 = (Keyword)cSoustractionEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMultiplicationEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMultiplicationMultiplicationKeyword_2_0 = (Keyword)cMultiplicationEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDivisionEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDivisionDivisionKeyword_3_0 = (Keyword)cDivisionEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Operations:
		//addition='addition' | soustraction='soustraction' | multiplication='multiplication' | division='division';
		public EnumRule getRule() { return rule; }
		
		//addition='addition' | soustraction='soustraction' | multiplication='multiplication' | division='division'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//addition='addition'
		public EnumLiteralDeclaration getAdditionEnumLiteralDeclaration_0() { return cAdditionEnumLiteralDeclaration_0; }
		
		//'addition'
		public Keyword getAdditionAdditionKeyword_0_0() { return cAdditionAdditionKeyword_0_0; }
		
		//soustraction='soustraction'
		public EnumLiteralDeclaration getSoustractionEnumLiteralDeclaration_1() { return cSoustractionEnumLiteralDeclaration_1; }
		
		//'soustraction'
		public Keyword getSoustractionSoustractionKeyword_1_0() { return cSoustractionSoustractionKeyword_1_0; }
		
		//multiplication='multiplication'
		public EnumLiteralDeclaration getMultiplicationEnumLiteralDeclaration_2() { return cMultiplicationEnumLiteralDeclaration_2; }
		
		//'multiplication'
		public Keyword getMultiplicationMultiplicationKeyword_2_0() { return cMultiplicationMultiplicationKeyword_2_0; }
		
		//division='division'
		public EnumLiteralDeclaration getDivisionEnumLiteralDeclaration_3() { return cDivisionEnumLiteralDeclaration_3; }
		
		//'division'
		public Keyword getDivisionDivisionKeyword_3_0() { return cDivisionDivisionKeyword_3_0; }
	}
	
	private final ModelElements pModel;
	private final ApplicationElements pApplication;
	private final TableElements pTable;
	private final ColonneElements pColonne;
	private final Colonne_deriveeElements pColonne_derivee;
	private final Colonne_referenceeElements pColonne_referencee;
	private final ColonnesimpleElements pColonnesimple;
	private final ExpressionElements pExpression;
	private final ExpressionBinaireElements pExpressionBinaire;
	private final AccesVariableElements pAccesVariable;
	private final OperateurElements pOperateur;
	private final OperationsElements eOperations;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public Gs1GrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pApplication = new ApplicationElements();
		this.pTable = new TableElements();
		this.pColonne = new ColonneElements();
		this.pColonne_derivee = new Colonne_deriveeElements();
		this.pColonne_referencee = new Colonne_referenceeElements();
		this.pColonnesimple = new ColonnesimpleElements();
		this.pExpression = new ExpressionElements();
		this.pExpressionBinaire = new ExpressionBinaireElements();
		this.pAccesVariable = new AccesVariableElements();
		this.pOperateur = new OperateurElements();
		this.eOperations = new OperationsElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.n7.Gs1".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//applications+=Application*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Application:
	//'Application' '{'
	//(tables+=Table)*
	//'}';
	public ApplicationElements getApplicationAccess() {
		return pApplication;
	}
	
	public ParserRule getApplicationRule() {
		return getApplicationAccess().getRule();
	}
	
	//Table:
	//'Table' name=ID '{'
	//'id' '=' id=INT
	//'Nom' '=' Nom=STRING
	//(colonnes+=Colonne)*
	//'}';
	public TableElements getTableAccess() {
		return pTable;
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}
	
	//Colonne:
	//Colonne_derivee | Colonne_referencee | Colonnesimple;
	public ColonneElements getColonneAccess() {
		return pColonne;
	}
	
	public ParserRule getColonneRule() {
		return getColonneAccess().getRule();
	}
	
	//Colonne_derivee:
	//'Colonne_derivee' name=ID '{'
	//'id' '=' id=INT
	//'Nom' '=' Nom=STRING
	//'expression' '=' expression=Expression
	//'}';
	public Colonne_deriveeElements getColonne_deriveeAccess() {
		return pColonne_derivee;
	}
	
	public ParserRule getColonne_deriveeRule() {
		return getColonne_deriveeAccess().getRule();
	}
	
	//Colonne_referencee:
	//'Colonne_referencee' name=ID '{'
	//'id' '=' id=INT
	//'Nom' '=' Nom=STRING
	//'table' '=' table=[Table]
	//'colonne' '=' colonne=[Colonne]
	//'}';
	public Colonne_referenceeElements getColonne_referenceeAccess() {
		return pColonne_referencee;
	}
	
	public ParserRule getColonne_referenceeRule() {
		return getColonne_referenceeAccess().getRule();
	}
	
	//Colonnesimple:
	//'Colonnesimple' name=ID '{'
	//'id' '=' id=INT
	//'Nom' '=' Nom=STRING
	//'}';
	public ColonnesimpleElements getColonnesimpleAccess() {
		return pColonnesimple;
	}
	
	public ParserRule getColonnesimpleRule() {
		return getColonnesimpleAccess().getRule();
	}
	
	//Expression:
	//ExpressionBinaire | AccesVariable;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//ExpressionBinaire:
	//'ExpressionBinaire' name=ID '{'
	//'operandeG' '=' operandeG=Expression
	//'operateur' '=' operateur=Operateur
	//'operandeD' '=' operandeD=Expression
	//'}';
	public ExpressionBinaireElements getExpressionBinaireAccess() {
		return pExpressionBinaire;
	}
	
	public ParserRule getExpressionBinaireRule() {
		return getExpressionBinaireAccess().getRule();
	}
	
	//AccesVariable:
	//'AccesVariable' name=ID '{'
	//'colonne' '=' colonne=[Colonne]
	//'}';
	public AccesVariableElements getAccesVariableAccess() {
		return pAccesVariable;
	}
	
	public ParserRule getAccesVariableRule() {
		return getAccesVariableAccess().getRule();
	}
	
	//Operateur:
	//'Operateur' '{'
	//'type' '=' type=Operations
	//'}';
	public OperateurElements getOperateurAccess() {
		return pOperateur;
	}
	
	public ParserRule getOperateurRule() {
		return getOperateurAccess().getRule();
	}
	
	//enum Operations:
	//addition='addition' | soustraction='soustraction' | multiplication='multiplication' | division='division';
	public OperationsElements getOperationsAccess() {
		return eOperations;
	}
	
	public EnumRule getOperationsRule() {
		return getOperationsAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
